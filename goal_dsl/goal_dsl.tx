/*
    Goal DSL
*/

GoalDSLModel:
    imports*=Import
    (
        (target=Target)?
        (goals*=Goal)
        (tConstraints*=TimeConstraint)
    )#  // Any order
;


Goal: TopicGoal | AreaGoal | PoseGoal | TrajectoryGoal | ComplexGoal |
GoalSequence;

AreaGoal: RectangleAreaGoal | CircularAreaGoal | StraightLineAreaGoal |
MovingAreaGoal;

PoseGoal: OrientationGoal | PointGoal | PoseGoal;

TopicGoal: TopicMessageReceivedGoal | TopicMessageParamGoal;

TrajectoryGoal: StraightLineTrajectoryGoal | WaypointTrajectoryGoal;

Target:
    'Target' name=ID '->' '[' goals*=[Goal|FQN][','] ']' ';'
;

GoalSequence:
    'Sequence' name=ID '->' '{'
    (
        ('addGoal(' goals+=[Goal|FQN] ')' ';')*
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
    )#
    '}'
;

ComplexGoal:
    'ComplexGoal' name=ID '->' '{'
    (
        ('algorithm:' algorithm=[ComplexGoalAlgorithmType] ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
        ('xAccomplished:' xAccomplished=INT ';')?
        ('addGoal(' goals+=[Goal|FQN] ')' ';')*
    )#
    '}'
;

/* ComplexExpressionRule: */
    
/* ; */

PrimitiveExpressionRule: StringExpressionRule | NumericExpressionRule;

StringExpressionRule:
    param=STRING operation=StringOperationType val=STRING
;

NumericExpressionRule:
    param=STRING operation=NumericOperationType val=NUMBER
;

StringOperationType: '~' | '!~' | '==' | '!=';

NumericOperationType: '>' | '<' | '==' | '!=';

BooleanOperationType: 'AND' | 'OR' | 'NOT' | 'XOR' | 'NOR' | 'XNOR' | 'NAND';

// TOPIC GOALS ----------------------------------------------------->

TopicMessageReceivedGoal:
    'TopicMsgReceivedGoal' name=ID '->' '{'
    (
        ('topic:' topic=STRING ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
    )#
    '}'
;

TopicMessageParamGoal:
    'TopicMsgParamGoal' name=ID '->' '{'
    (
        ('topic:' topic=STRING ';')
        ('expression:' expression=PrimitiveExpressionRule ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
    )#
    '}'
;

// <-----------------------------------------------------------------

// AREA GOALS ------------------------------------------------------>

RectangleAreaGoal:
    'RectangleAreaGoal' name=ID '->' '{'
    (
        ('center:' centerPoint=Point ';')
        ('lengthX:' lengthX=FLOAT ';')
        ('lengthY:' lengthY=FLOAT ';')
        ('type:' type=[AreaGoalType] ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#  // Any order
    '}'
;

PolylineAreaGoal:
    'PolylineAreaGoal' name=ID '->' '{'
    (
        ('points:' '[' points+=Point[','] ']' ';')
        ('type:' type=[AreaGoalType] ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#  // Any order
    '}'
;

MovingAreaGoal:
    'MovingAreaGoal' name=ID '->' '{'
    (
        ('radius:' type=FLOAT ';')
        ('type:' type=[AreaGoalType] ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#  // Any order
    '}'
;


CircularAreaGoal:
    'CircularAreaGoal' name=ID '->' '{'
    (
        ('center:' centerPoint=Point ';')
        ('radius:' radius=FLOAT ';')
        ('type:' type=[AreaGoalType] ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;

StraightLineAreaGoal:
    'StraightLineAreaGoal' name=ID '->' '{'
    (
        ('startPoint:' startPoint=Point ';')
        ('finishPoint:' finishPoint=Point ';')
        ('type:' type=[AreaGoalType] ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;

// <-----------------------------------------------------------------

// TRAJECTORY GOALS ------------------------------------------------>

StraightLineTrajectoryGoal:
    'StraightLineTrajGoal' name=ID '->' '{'
    (
        ('startPoint:' startPoint=Point ';')
        ('finishPoint:' finishPoint=Point ';')
        ('maxDeviation:' maxDeviation=FLOAT ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;

WaypointTrajectoryGoal:
    'WaypointTrajectoryGoal' name=ID '->' '{'
    (
        ('points:' '[' points+=Point[','] ']' ';')
        ('maxDeviation:' maxDeviation=FLOAT ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;
// <----------------------------------------------------------------

PoseGoal:
    'PoseGoal' name=ID '->' '{'
    (
        ('orientation:' orientation=Orientation ';')
        ('position:' position=Point ';')
        ('maxDeviation:' maxDeviation=FLOAT ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;

OrientationGoal:
    'OrientationGoal' name=ID '->' '{'
    (
        ('orientation:' orientation=Orientation ';')
        ('maxDeviation:' maxDeviation=FLOAT ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;

PointGoal:
    'PointGoal' name=ID '->' '{'
    (
        ('point:' point=Point ';')
        ('maxDeviation:' maxDeviation=FLOAT ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;

Point: Point2D | Point3D;
Orientation: Orientation2D | Orientation3D;

Point2D:
    'Point2D' '(' xAxis=FLOAT ',' yAxis=FLOAT ')'
;

Point3D:
    'Point3D' '(' xAxis=FLOAT ',' yAxis=FLOAT ',' zAxis=FLOAT ')'
;

Orientation2D:
    'Orientation2D' '(' xAxis=FLOAT ',' yAxis=FLOAT ')'
;

Orientation3D:
    'Orientation3D' '(' xAxis=FLOAT ',' yAxis=FLOAT ',' zAxis=FLOAT ')'
;

TimeConstraint: TimeConstraintDuration;

TimeConstraintDuration:
    'TCDuration' name=ID '->' '{'
    (
        ('type:' type=TimingConstraintType ';')
        ('duration:' time=FLOAT ';')
        ('deviation:' deviation=FLOAT ';')
    )#
    '}'
;


// Follow this: https://github.com/textX/textX/blob/master/tests/functional/test_scoping/test_reference_to_buildin_attribute.py
/* Assignment: goalRef=[Goal|FQN].goalParam */

TSComparatorType: '>' | '<' | '==';

AreaGoalType: 'ENTER' | 'EXIT' | 'AVOID' | 'STEP';

ComplexGoalAlgorithmType: 'ALL_ACCOMPLISHED' | 'NONE_ACCOMPLISHED' |
'AT_LEAST_ONE' | 'EXACTLY_X_ACCOMPLISHED' | 'ALL_ACCOMPLISHED_ORDERED' |
'EXACTLY_X_ACCOMPLISHED_ORDERED';

ParamValueConstraintType: 'EXACT_VALUE' | 'WITHIN_RANGE' | 'OUT_OF_RANGE' |
'EXISTS_IN_COLLECTION';

TimingConstraintType: 'FROM_APP_START' | 'FROM_GOAL_START';

FQN: ID('.'ID)*;
Import: 'import' importURI=FQN ('as' name=ID)? ';';

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;
