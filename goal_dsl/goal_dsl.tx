/*
    Goal DSL
*/

Model:
    goals*=Goal
;


Goal: DSVariable | DSCommand | PoseGoal | TrajectoryGoal | AvoidAreaGoal |
ComplexGoal;

AvoidAreaGoal: RectangleAreaGoal | CircularAreaGoal;

TrajectoryGoal: CrossStraightLineGoal;

ComplexGoal:
    'ComplexGoal' name=ID '->' '{'
        'combinationAlgorithm:' combinationAlgorithm=[GoalCombinationAlgorithm]
        ';'
        'accomblishedGoalsRequired:' accomblishedGoalsRequired=BOOL ';'
        'bHasSequenceConstraints:' bHasSequenceConstraints=BOOL ';'
        'goals: ' '[' goalRefs+=Goal[','] ']' ';'
    '}'
;

RectangleAreaGoal:
    'RectangleAreaGoal' name=ID '->' '{'
        'centerPoint:' centerPoint=Point3D ';'
        'sideLength:' sideLength=FLOAT ';'
    '}'
;

CircularAreaGoal:
    'CircularAreaGoal' name=ID '->' '{'
        'centerPoint:' centerPoint=Point3D ';'
        'radius:' radius=FLOAT ';'
    '}'
;

CrossStraightLineGoal:
    'CrossStraightLineGoal' name=ID '->' '{'
        'startPoint:' centerPoint=Point3D ';'
        'finishPoint:' centerPoint=Point3D ';'
        'maxDeviation': maxDeviation=FLOAT ';'
    '}'
;

Pose2D

Point2D:
    'Point2D' '(' xAxis=FLOAT ',' yAxis=FLOAT ')'
;

Point3D:
    'Point3D' '(' xAxis=FLOAT ',' yAxis=FLOAT ',' zAxis=FLOAT ')'
;

Orientation2D:
    'Orientation2D' '(' xAxis=FLOAT ',' yAxis=FLOAT ')'
;

Orientation3D:
    'Orientation3D' '(' xAxis=FLOAT ',' yAxis=FLOAT ',' zAxis=FLOAT ')'
;


GoalCombinationAlgorithm: 'ALL_ACCOMPLISHED' | 'NONE_ACCOMPLISHED' |
'AT_LEAST_ONE' | 'EXACTLY_X_ACCOMPLISHED';

ParamValueConstraintType: 'EXACT_VALUE' | 'WITHIN_RANGE' | 'OUT_OF_RANGE' |
'EXISTS_IN_COLLECTION';

TimingConstraintType: 'FROM_APP_START' | 'WITHIN_PERIOD_FROM_APP_START' |
'FROM_OTHER_GOAL_COMPLETION' | 'WITHIN_PERIOD_FROM_OTHER_GOAL_COMPLETION' |
'FROM_GOAL_START';


FQN: ID+['.'];
FQNI: ID+['.']('.*')?;
Import: 'import' importURI=FQNI ('as' name=ID)? ';';

// Import Rule for models. Import other models from files or textx
// global scope database.
// https://textx.github.io/textX/stable/multimetamodel/#use-case-meta-model-sharing-with-the-importuri-feature

Description: /\#(.*?)$/;

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;
