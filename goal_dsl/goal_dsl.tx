/*
    Goal DSL
*/

GoalDSLModel:
    imports*=Import
    (
        (target=Target)?
        (goals*=Goal)
        (tConstraints*=TimeConstraint)
        (middleware*=CommunicationMiddleware)
    )#  // Any order
;


Goal: TopicGoal | AreaGoal | MotionGoal | TrajectoryGoal | ComplexGoal |
GoalSequence;

AreaGoal: RectangleAreaGoal | CircularAreaGoal | CrossStraightLineGoal |
MovingAreaGoal | PolylineAreaGoal;

MotionGoal: OrientationGoal | PositionGoal | PoseGoal;

TopicGoal: TopicMessageReceivedGoal | TopicMessageParamGoal;

TrajectoryGoal: StraightLineTrajectoryGoal | WaypointTrajectoryGoal;

CommunicationMiddleware: AMQPBroker | MQTTBroker | RedisBroker;

BrokerAuth: BrokerAuthPlain;

BrokerAuthPlain:
    'AuthPlain' '(' username=STRING ',' password=STRING ')'
;

AMQPBroker:
    'AMQPBroker' name=ID '->' '{'
    (
        ('host:' host=STRING ';')
        ('port:' port=INT ';')
        ('vhost:' vhost=STRING ';')
        ('exchange:' exchange=STRING ';')?
        ('auth:' auth=BrokerAuth ';')
    )#
    '}'
;

MQTTBroker:
    'MQTTBroker' name=ID '->' '{'
    (
        ('host:' host=STRING ';')
        ('port:' port=INT ';')
        ('auth:' auth=BrokerAuth ';')
    )#
    '}'
;

RedisBroker:
    'RedisBroker' name=ID '->' '{'
    (
        ('host:' host=STRING ';')
        ('port:' port=INT ';')
        ('db:' db=INT ';')?
        ('auth:' auth=BrokerAuth ';')
    )#
    '}'
;

Target:
    'Target' name=ID '->' '{'
    (
        ('goals:' '[' goals*=[Goal|FQN][','] ']' ';')
        ('middleware:' middleware=[CommunicationMiddleware] ';')
    )#
    '}'
;

GoalSequence:
    'Sequence' name=ID '->' '{'
    (
        ('addGoal(' goals+=[Goal|FQN] ')' ';')*
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
    )#
    '}'
;

ComplexGoal:
    'ComplexGoal' name=ID '->' '{'
    (
        ('algorithm:' algorithm=[ComplexGoalAlgorithmType] ';')
        ('timeConstraint:' timeConstraint=[TimeConstraint|FQN] ';')?
        ('xAccomplished:' xAccomplished=INT ';')?
        ('addGoal(' goals+=[Goal|FQN] ')' ';')*
    )#
    '}'
;

Condition: ConditionGroup | PrimitiveCondition;

ConditionGroup:
    '(' r1=Condition ')' operator=BooleanOperatorType '(' r2=Condition ')'
;

PrimitiveCondition: StringCondition | NumericCondition;

StringCondition:
    param=STRING operator=StringOperatorType val=STRING
;

NumericCondition:
    param=STRING operator=NumericOperatorType val=NUMBER
;

StringOperatorType: '~' | '!~' | '==' | '!=';

NumericOperatorType: '>' | '<' | '==' | '!=';

BooleanOperatorType: 'AND' | 'OR' | 'NOT' | 'XOR' | 'NOR' | 'XNOR' | 'NAND';

// TOPIC GOALS ----------------------------------------------------->

TopicMessageReceivedGoal:
    'TopicMsgReceivedGoal' name=ID '->' '{'
    (
        ('topic:' topic=STRING ';')
        ('timeConstraints:' '[' timeConstraints*=TimeConstraint[','] ']' ';')?
    )#
    '}'
;

TopicMessageParamGoal:
    'TopicMsgParamGoal' name=ID '->' '{'
    (
        ('topic:' topic=STRING ';')
        ('condition:' condition=Condition ';')
        ('timeConstraints:' '[' timeConstraints*=TimeConstraint[','] ']' ';')?
    )#
    '}'
;

// <-----------------------------------------------------------------

// AREA GOALS ------------------------------------------------------>

RectangleAreaGoal:
    'RectangleAreaGoal' name=ID '->' '{'
    (
        ('bottomLeftEdge:' bottomLeftEdge=Point ';')
        ('lengthX:' lengthX=NUMBER ';')
        ('lengthY:' lengthY=NUMBER ';')
        ('tag:' type=AreaGoalTag ';')
        ('timeConstraints:' '[' timeConstraints*=TimeConstraint[','] ']' ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#  // Any order
    '}'
;

PolylineAreaGoal:
    'PolylineAreaGoal' name=ID '->' '{'
    (
        ('points:' '[' points+=Point[','] ']' ';')
        ('tag:' type=AreaGoalTag ';')
        ('timeConstraints:' '[' timeConstraints*=TimeConstraint[','] ']' ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#  // Any order
    '}'
;

MovingAreaGoal:
    'MovingAreaGoal' name=ID '->' '{'
    (
        ('radius:' radius=NUMBER ';')
        ('tag:' type=AreaGoalTag ';')
        ('timeConstraints:' '[' timeConstraints*=TimeConstraint[','] ']' ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#  // Any order
    '}'
;


CircularAreaGoal:
    'CircularAreaGoal' name=ID '->' '{'
    (
        ('center:' centerPoint=Point ';')
        ('radius:' radius=NUMBER ';')
        ('tag:' type=AreaGoalTag ';')
        ('timeConstraints:' '[' timeConstraints*=TimeConstraint[','] ']' ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;

CrossStraightLineGoal:
    'CrossStraightLineGoal' name=ID '->' '{'
    (
        ('startPoint:' startPoint=Point ';')
        ('endPoint:' endPoint=Point ';')
        ('tag:' type=AreaGoalTag ';')
        ('timeConstraints:' '[' timeConstraints*=TimeConstraint[','] ']' ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;

// <-----------------------------------------------------------------

// TRAJECTORY GOALS ------------------------------------------------>

StraightLineTrajectoryGoal:
    'StraightLineTrajGoal' name=ID '->' '{'
    (
        ('startPoint:' startPoint=Point ';')
        ('finishPoint:' finishPoint=Point ';')
        ('maxDeviation:' maxDeviation=NUMBER ';')
        ('timeConstraints:' '[' timeConstraints*=TimeConstraint[','] ']' ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;

WaypointTrajectoryGoal:
    'WaypointTrajectoryGoal' name=ID '->' '{'
    (
        ('points:' '[' points+=Point[','] ']' ';')
        ('maxDeviation:' maxDeviation=NUMBER ';')
        ('timeConstraints:' '[' timeConstraints*=TimeConstraint[','] ']' ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;
// <----------------------------------------------------------------

PoseGoal:
    'PoseGoal' name=ID '->' '{'
    (
        ('orientation:' orientation=Orientation ';')
        ('position:' position=Point ';')
        ('maxDeviationPos:' maxDeviationPos=NUMBER ';')
        ('maxDeviationOri:' maxDeviationOri=NUMBER ';')
        ('timeConstraints:' '[' timeConstraints*=TimeConstraint[','] ']' ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;

OrientationGoal:
    'OrientationGoal' name=ID '->' '{'
    (
        ('orientation:' orientation=Orientation ';')
        ('maxDeviation:' maxDeviation=NUMBER ';')
        ('timeConstraints:' '[' timeConstraints*=TimeConstraint[','] ']' ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;

PositionGoal:
    'PositionGoal' name=ID '->' '{'
    (
        ('position:' point=Point ';')
        ('maxDeviation:' maxDeviation=NUMBER ';')
        ('timeConstraints:' '[' timeConstraints*=TimeConstraint[','] ']' ';')?
        ('listening:' listeningTopic=STRING ';')?
    )#
    '}'
;

Point: Point2D | Point3D;
Orientation: Orientation2D | Orientation3D;

Point2D:
    'Point2D' '(' xAxis=NUMBER ',' yAxis=NUMBER ')'
;

Point3D:
    'Point3D' '(' xAxis=NUMBER ',' yAxis=NUMBER ',' zAxis=NUMBER ')'
;

Orientation2D:
    'Orientation2D' '(' zAxis=NUMBER ')'
;

Orientation3D:
    'Orientation3D' '(' xAxis=NUMBER ',' yAxis=NUMBER ',' zAxis=NUMBER ')'
;

TimeConstraint: TimeConstraintDuration;


TimeConstraintDuration:
    type=TimeConstraintType '(' comparator=TCComparator time=FLOAT ')'
;


// Follow this: https://github.com/textX/textX/blob/master/tests/functional/test_scoping/test_reference_to_buildin_attribute.py
/* Assignment: goalRef=[Goal|FQN].goalParam */

TCComparator: '>' | '<' | '==';

AreaGoalTag: 'ENTER' | 'EXIT' | 'AVOID' | 'STEP';

ComplexGoalAlgorithmType: 'ALL_ACCOMPLISHED' | 'NONE_ACCOMPLISHED' |
'AT_LEAST_ONE' | 'EXACTLY_X_ACCOMPLISHED' | 'ALL_ACCOMPLISHED_ORDERED' |
'EXACTLY_X_ACCOMPLISHED_ORDERED';

/* ParamValueConstraintType: 'EXACT_VALUE' | 'WITHIN_RANGE' | 'OUT_OF_RANGE' | */
/* 'EXISTS_IN_COLLECTION'; */

TimeConstraintType: 'FROM_APP_START' | 'FROM_GOAL_START';

FQN: ID('.'ID)*;
Import: 'import' importURI=FQN ('as' name=ID)? ';';

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;
