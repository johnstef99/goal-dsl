TopicMsgReceivedGoal TopicGoalA -> {
    topic: "robot.opts.face_detection.detected";
    timeConstraints: [FROM_GOAL_START(< 10.0)];
}

TopicMsgParamGoal TopicGoalB -> {
    topic: "robot.sensor.qr.detected";
    condition: "msg" == "R4A";
    timeConstraints: [FROM_GOAL_START(< 10.0)];
}

TopicMsgParamGoal TopicGoalC -> {
    topic: "robot.sensor.sonar.front";
    condition: "range" < 10.0 ;
    timeConstraints: [FROM_GOAL_START(< 10.0)];
}

TopicMsgParamGoal TopicGoalD -> {
    topic: "robot.sensor.motion.base";
    condition: ("angVel" < 0.5) AND ("linVel" > 3.0);
    timeConstraints: [FROM_GOAL_START(< 10.0)];
}

TopicMsgParamGoal TopicGoalE -> {
    topic: "robot.sensor.motion.base";
    condition: (("linVel" > 10) AND ("angVel" < 0.5)) AND ("error" == "");
    timeConstraints: [FROM_GOAL_START(< 10.0)];
}

TopicMsgParamGoal TopicGoalF -> {
    topic: "robot.sensor.face.detected";
    condition: "msg" ~ "error";
    timeConstraints: [FROM_GOAL_START(< 10.0)];
}

TopicMsgParamGoal TopicGoalG -> {
    topic: "robot.sensor.face.detected";
    condition: "msg" !~ "error";
    timeConstraints: [FROM_GOAL_START(< 10.0)];
}

TopicMsgParamGoal TopicGoalH -> {
    topic: "robot.pose";
    condition: "position.x" > 10;
    timeConstraints: [FROM_GOAL_START(< 10.0)];
}

RedisBroker MyMiddleware -> {
    host: 'localhost';
    port: 6379;
    db: 0;
    auth: AuthPlain('', '');  // AuthPlain(username, password)
}


Target MyAppTarget -> {
    goals: [TopicGoalA, TopicGoalB, TopicGoalC, TopicGoalD, TopicGoalE,
               TopicGoalF, TopicGoalG, TopicGoalH];
    middleware: MyMiddleware;
    concurrent: True;
}
